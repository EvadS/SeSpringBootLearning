/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.20).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.FileHash;
import org.springframework.core.io.Resource;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-06-23T14:28:08.947Z[GMT]")
@Api(value = "file_hashes", description = "the file_hashes API")
public interface FileHashesApi {

    @ApiOperation(value = "Удаление хэшей файлов.", nickname = "deleteFileHashesHash", notes = "Должно удалять только хэши текущего пользователя (`X-Auth-User`).", authorizations = {
        @Authorization(value = "X-Auth-User")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK"),
        @ApiResponse(code = 401, message = "Не авторизован. Если не указан заголовок `X-Auth-User`."),
        @ApiResponse(code = 404, message = "Если не найдено ни одного файла с заданным хэшем.") })
    @RequestMapping(value = "/file_hashes/{hash}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteFileHashesHash(@ApiParam(value = "Хэш файла (sha256 или md5).",required=true) @PathVariable("hash") String hash
);


    @ApiOperation(value = "Получение имени файла по хэшу", nickname = "getFileHashes", notes = "", response = FileHash.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = FileHash.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Файлы с данным хэшем не найдены.") })
    @RequestMapping(value = "/file_hashes/{hash}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<FileHash>> getFileHashes(@ApiParam(value = "Хэш файла (sha256 или md5).",required=true) @PathVariable("hash") String hash
);


    @ApiOperation(value = "Добавление хэша файла.", nickname = "postFileHashes", notes = "Файл загружается через поле `file` в `multipart/form-data` запросе. Если у пользователя уже есть файл с такими именем и хэшами, его не нужно добавлять второй раз, но ответ должен быть успешным. ", response = FileHash.class, authorizations = {
        @Authorization(value = "X-Auth-User")    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = FileHash.class),
        @ApiResponse(code = 401, message = "Не авторизован. Если отсутствует заголовок `X-Auth-User`.") })
    @RequestMapping(value = "/file_hashes",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    ResponseEntity<FileHash> postFileHashes(@ApiParam(value = "file detail") @Valid @RequestPart("file") MultipartFile file
);

}
